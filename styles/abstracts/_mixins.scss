/* stylelint-disable */
/*
// Mixins
// ------------------------------------------------ */
// @use './variables';

// Media Query helper, uses the variables $queries map
@mixin queries($key, $queries) {
  $query: map-get($queries, $key);
  @if ($query == $defaultQuery) {
    @content;
  } @else {
    @media (min-width: #{$query}) {
      @content;
    }
  }
}

// Media Query helper, uses the $breakpoints map
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin respond-to-max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin respond-within($breakpoint1, $breakpoint2) {
  @if map-has-key($breakpoints, $breakpoint1) and
    map-has-key($breakpoints, $breakpoint2)
  {
    @media (min-width: #{map-get($breakpoints, $breakpoint1)}) and (max-width: #{map-get($breakpoints, $breakpoint2)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint1}`/`#{$breakpoint2}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

// Spacing class generation - DO NOT MODIFY
@mixin spacing($spacing) {
  @each $size in $sizes {
    @for $spacing-size from 0 through $spacing-max-size {
      @each $spacing-name, $group in $spacing {
        @each $group-name in $group {
          .#{$size}\:#{$group-name}-#{$spacing-size} {
            @include queries($size, $queries) {
              // Padding
              @if $group-name == "p" {
                padding: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "px") {
                padding: 0 (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "py") {
                padding: (calc($spacing-size/10) + rem) 0;
              }

              @if ($group-name == "pt") {
                padding-top: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "pb") {
                padding-bottom: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "pl") {
                padding-left: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "pr") {
                padding-right: (calc($spacing-size/10) + rem);
              }

              // Margin
              @if $group-name == "m" {
                margin: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "mx") {
                margin: 0 (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "my") {
                margin: (calc($spacing-size/10) + rem) 0;
              }

              @if ($group-name == "mt") {
                margin-top: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "mb") {
                margin-bottom: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "ml") {
                margin-left: (calc($spacing-size/10) + rem);
              }

              @if ($group-name == "mr") {
                margin-right: (calc($spacing-size/10) + rem);
              }
            }
          }
        }
      }
    }
  }
}

// Typography class generation - DO NOT MODIFY
@mixin typography($font-families) {
  @each $family-name, $group in $font-families {
    @each $group-name, $font-name in $group {
      .ff-#{$family-name}-#{"" + $group-name} {
        font-family: $font-name;
      }
    }
  }

  @each $size in $sizes {
    @for $font-size from 0 through $font-max-size {
      .#{$size}\:fs-#{$font-size} {
        @include queries($size, $queries) {
          font-size: calc($font-size / 10) + rem;
        }
      }
    }

    @for $font-tracking from 0 through $font-max-tracking {
      .#{$size}\:ls-#{$font-tracking} {
        @include queries($size, $queries) {
          letter-spacing: calc($font-tracking / 100) + rem;
        }
      }
    }

    @for $font-leading from 0 through $font-max-leading {
      .#{$size}\:lh-#{$font-leading} {
        @include queries($size, $queries) {
          line-height: calc($font-leading / 10) + rem;
        }
      }
    }
  }
}

@mixin font-stroke($color, $size) {
  -webkit-text-stroke: $size $color;
  text-stroke: $size $color;
}
@mixin font-gradient($topColor, $bottomColor) {
  color: $bottomColor;
  background: -webkit-linear-gradient($topColor 53%, $bottomColor 90%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

// Color class generation - DO NOT MODIFY
@mixin color($colors) {
  @each $color-name, $group in $colors {
    @each $group-name, $color-hex in $group {
      @if length($group) > 1 {
        .fc-#{"" + $color-name}-#{"" + $group-name} {
          color: #{$color-hex};
        }
      } @else {
        .fc-#{"" + $color-name} {
          color: #{$color-hex};
        }
      }
    }
  }
}

@mixin background-color($colors) {
  @each $color-name, $group in $colors {
    @each $group-name, $color-hex in $group {
      @if length($group) > 1 {
        .bg-#{"" + $color-name}-#{"" + $group-name} {
          background: #{$color-hex};
        }
      } @else {
        .bg-#{"" + $color-name} {
          background: #{$color-hex};
        }
      }
    }
  }
}

@mixin background-gradient($gradients) {
  @each $color-name, $group in $gradients {
    .bg-#{"" + $color-name} {
      @include gradient-vertical(nth($group, 1), nth($group, 2));
    }
  }
}

// Miscellaneous
@mixin border-radius($rad: 10px) {
  -moz-border-radius: $rad;
  -webkit-border-radius: $rad;
  border-radius: $rad;
}

@mixin box-shadow(
  $x-axis: 0.2rem,
  $y-axis: 0.2rem,
  $blur: 0.6rem,
  $spread: 0,
  $opacity: 0.25
) {
  box-shadow: $x-axis $y-axis $blur $spread rgba(0, 0, 0, $opacity);
}

@mixin blur-backdrop($background: #000000a6, $blur: 0.3rem, $brightness: 1.5) {
  position: relative;

  &::before,
  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
  }

  &::before {
    -webkit-backdrop-filter: blur($blur);
    backdrop-filter: blur($blur);
  }

  &::after {
    background: $background;
    -webkit-backdrop-filter: brightness($brightness);
    backdrop-filter: brightness($brightness);
  }
}

// Color Gradients
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-vertical(
  $start-color: #555,
  $end-color: #333,
  $start-percent: 0%,
  $end-percent: 100%
) {
  background-image: -webkit-linear-gradient(
    top,
    $start-color $start-percent,
    $end-color $end-percent
  ); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(
    top,
    $start-color $start-percent,
    $end-color $end-percent
  ); // Opera 12
  background-image: linear-gradient(
    to bottom,
    $start-color $start-percent,
    $end-color $end-percent
  ); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

// Animations
@mixin fadeIn {
  animation: fadeIn 1s;

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}

@mixin fadeOut {
  animation: fadeOut 1s;

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
}

@mixin slideUp {
  animation: slideUp 0.5s;

  @keyframes slideUp {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0%);
      opacity: 1;
    }
  }
}

@mixin slideDown {
  animation: slideDown 0.5s;

  @keyframes slideDown {
    from {
      transform: translateY(0%);
      opacity: 1;
    }
    to {
      transform: translateY(150%);
      opacity: 0;
    }
  }
}
